// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Raccoon
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import ObjectiveC
import Photos
@_exported import Raccoon
import ReplayKit
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import ObjectiveC.runtime
public class RaccoonInitTask {
  public init(secretKey: Swift.String, userId: Swift.String)
  public func execute()
  @objc deinit
}
@available(iOS 13.0, *)
public struct RaccoonLabelInternal : SwiftUI.ViewModifier {
  @_Concurrency.MainActor(unsafe) public func body(content: RaccoonLabelInternal.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7Raccoon0A13LabelInternalV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
@available(iOS 13.0, *)
extension SwiftUI.View {
  public func RaccoonLabel(_ label: Swift.String) -> some SwiftUI.View
  
}
final public class RaccoonRecorder {
  public init()
  final public func startRecording(to outputURL: Foundation.URL? = nil, size: CoreFoundation.CGSize? = nil, errorHandler: @escaping (any Swift.Error) -> Swift.Void, completionHandler: @escaping () -> Swift.Void)
  final public func stopRecording(completionHandler: @escaping (Swift.Result<Swift.String?, any Swift.Error>) -> Swift.Void)
  @objc deinit
}
public struct RRStyles : Swift.Decodable, Swift.Encodable {
  public var backgroundColor: Swift.String
  public var fontSize: Swift.Int
  public var sendFontColor: Swift.String
  public var receiveFontColor: Swift.String
  public var receiveBubbleColor: Swift.String
  public var sendBubbleColor: Swift.String
  public var fontSpacing: Swift.Float
  public var fontWeight: Swift.Int
  public var lineHeight: Swift.Double
  public var textDecoration: [Swift.String]
  public var fontName: Swift.String
  public var inputBackgroundColor: Swift.String
  public var sendButtonBackgroundColor: Swift.String
  public var sendButtonTextColor: Swift.String
  public var inputFontSize: Swift.Int
  public var sendButtonSize: Swift.Int
  public var fontURL: Swift.String
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RRChatMessage : Swift.Decodable, Swift.Encodable {
  public let message: Swift.String
  public let isRemote: Swift.Bool
  public let timestamp: Swift.Int64
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class RaccoonDebugHelper {
  public static func log(_ message: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RRChatMessagesTask {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class RaccoonTrackingControlView : UIKit.UIStackView {
  @_Concurrency.MainActor(unsafe) public var textView: UIKit.UILabel?
  @_Concurrency.MainActor(unsafe) public func setClickListener(listener: @escaping () -> ())
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Raccoon : ObjectiveC.NSObject {
  public static let FRAMEWORK_NATIVE: Swift.String
  public static let shared: Raccoon
  public static var isTracking: Swift.Bool
  public static var showTrackingView: Swift.Bool
  public static var showRocketRaccoon: Swift.Bool
  public var trackingButton: RaccoonTrackingControlView?
  weak public var currentSegueController: UIKit.UIViewController?
  public func initialize(secretKey: Swift.String, userId: Swift.String)
  public func initialize(secretKey: Swift.String, userId: Swift.String, endpoint: Swift.String)
  public func setInitialized(initialized: Swift.Bool)
  public func getInitialized() -> Swift.Bool
  public func getSecretKey() -> Swift.String?
  public func setSecretKey(secretKey: Swift.String)
  public func getEndpoint() -> Swift.String
  public func setEndpoint(endpoint: Swift.String)
  public func getSwiftUICoordinates() -> [Swift.String : (CoreFoundation.CGRect, Swift.Int64, Swift.Bool)]
  public func addSwiftUICoordinates(label: Swift.String, rect: CoreFoundation.CGRect)
  public func onSwiftUIViewDisappear(label: Swift.String)
  public func onSwiftUIViewAppear(label: Swift.String)
  public func getShouldEnableDebug() -> Swift.Bool
  public func setShouldEnableDebug(shouldEnableDebug: Swift.Bool)
  public func getAttributes() -> RaccoonAttributes
  public func getCurrentView() -> Swift.String
  public func setCurrentView(currentView: Swift.String)
  public func setCurrentViewListener(viewListener: @escaping (Swift.String) -> ())
  public func setHomeNavigationRunnable(runnable: @escaping () -> Swift.Void)
  public func getChatHistory() -> [RRChatMessage]
  public func setChatHistory(chatHistory: [RRChatMessage])
  public func getCurrentViewController() -> UIKit.UIViewController?
  public func setCurrentViewController(currentViewController: UIKit.UIViewController)
  public func getHomeNavigationRunnable() -> (() -> Swift.Void)?
  public func didSelectRow(for tableView: UIKit.UITableView, at indexPath: Foundation.IndexPath)
  public func didSelectItem(for collectionView: UIKit.UICollectionView, at indexPath: Foundation.IndexPath)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class RRBottomCloseView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
public struct RRAction : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class RRFloaterManager : ObjectiveC.NSObject {
  public static let shared: RRFloaterManager
  final public var floaterView: RRFloaterView?
  final public let bottomCloseView: RRBottomCloseView
  final public var layoutData: RRLayout
  final public func overrideNavigationDelegate()
  final public func show()
  final public func floaterMoveEvents()
  @objc deinit
}
extension RRFloaterManager : UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func navigationController(_ navigationController: UIKit.UINavigationController, animationControllerFor operation: UIKit.UINavigationController.Operation, from fromVC: UIKit.UIViewController, to toVC: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
}
extension RRFloaterManager : RRFloaterViewDelegate {
  final public func floatViewBeginMove(floatView: RRFloaterView, point: CoreFoundation.CGPoint)
  final public func floatViewMoved(floatView: RRFloaterView, point: CoreFoundation.CGPoint)
  final public func floatViewCancelMove(floatView: RRFloaterView)
}
@_hasMissingDesignatedInitializers public class RaccoonNetworkTask {
  public static func getHeaders() -> [Swift.String : Any]
  public static func initialize(callback: @escaping ([Swift.String : Any]) -> Swift.Void)
  public static func uploadMedia(viewName: Swift.String, file: Swift.String, fileExtension: Swift.String, callback: @escaping (Swift.String?) -> ())
  public static func registerTask(key: Swift.String, callback: @escaping ([Swift.String : Any]) -> Swift.Void)
  public static func registerSnapshots(registerTaskResponse: [Swift.String : Any], taskFlow: [RaccoonSnapshot])
  public static func getSteps(query: Swift.String, callback: @escaping ([Swift.String : Any]?) -> Swift.Void)
  public static func uploadChatHistory(chatHistory: [RRChatMessage])
  public static func logEvent(logEvent: RaccoonLogEvent, taskId: Swift.String = "")
  @objc deinit
}
public struct RaccoonScrollView : Swift.Decodable, Swift.Encodable, Swift.Equatable {
  public let index: Swift.Int
  public let scrollOffsetX: Swift.Int
  public let scrollOffsetY: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class RaccoonElementsTask {
  public static func traverseStoryboardView(view: UIKit.UIView, actionName: Swift.String) -> ([RaccconElement], [Swift.String : RaccoonScrollView])
  public static func getAllElements(for view: UIKit.UIView, actionName: Swift.String) -> ([RaccconElement], [Swift.String : RaccoonScrollView])
  @objc deinit
}
public struct RRDefaults : Swift.Decodable, Swift.Encodable {
  public let failureMessage: Swift.String
  public let successMessageTemplate: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class DummyClass {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RaccoonUtils {
  public static func millisecondsSinceEpoch() -> Swift.Int64
  public static func shouldTrack(_ name: Swift.String) -> Swift.Bool
  public static func getCurrentViewController() -> UIKit.UIViewController?
  public static func getRaccoonElementType(of view: UIKit.UIView) -> (RaccoonType, RaccoonInputType, Swift.String)
  public static func getViewOrientation() -> Swift.String
  public static func isRunningOnSimulator() -> Swift.Bool
  public static func getNavigationControllerFromRoot() -> UIKit.UINavigationController?
  @objc deinit
}
public struct RRActionPosition : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public protocol RRFloaterViewDelegate : ObjectiveC.NSObjectProtocol {
  func floatViewBeginMove(floatView: RRFloaterView, point: CoreFoundation.CGPoint)
  func floatViewMoved(floatView: RRFloaterView, point: CoreFoundation.CGPoint)
  func floatViewCancelMove(floatView: RRFloaterView)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class RRFloaterView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var beginPoint: CoreFoundation.CGPoint?
  @_Concurrency.MainActor(unsafe) public var layoutData: RRLayout?
  @_Concurrency.MainActor(unsafe) public var show: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension RRFloaterView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
}
public struct RaccconElement : Swift.Decodable, Swift.Encodable {
  public let elementId: Swift.String
  public let fragmentId: Swift.String
  public let x: Swift.Int
  public let y: Swift.Int
  public let width: Swift.Int
  public let height: Swift.Int
  public let actionName: Swift.String
  public var isNavigational: Swift.Bool
  public let actionId: Swift.String
  public var destination: Swift.String
  public var value: Swift.String
  public let elementDescription: Swift.String
  public let type: RaccoonType
  public let inputType: RaccoonInputType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class RaccoonAttributes {
  public func getUserId() -> Swift.String
  public func setUserId(userId: Swift.String)
  public func getAppVersion() -> Swift.String
  public func setAppVersion(appVersion: Swift.String)
  public func getIOSVersion() -> Swift.String
  public func setIOSVersion(iosVersion: Swift.String)
  public func getSDKVersion() -> Swift.String
  public func setSDKVersion(sdkVersion: Swift.String)
  public func getPlatform() -> Swift.String
  public func setPlatform(platform: Swift.String)
  @objc deinit
}
public enum RaccoonType : Swift.String, Swift.Decodable, Swift.Encodable {
  case TYPE_TEXT
  case TYPE_IMAGE
  case TYPE_WEBVIEW
  case TYPE_RADIO_GROUP
  case TYPE_INPUT
  case TYPE_TABBAR
  case TYPE_BAR_BUTTON_ITEM
  case TYPE_SEARCH
  case TYPE_SEARCH_CANCEL
  case TYPE_SYSTEM_BACK
  case TYPE_PICKER_VIEW
  case TYPE_DEFAULT
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RaccoonInputType : Swift.String, Swift.Decodable, Swift.Encodable {
  case TYPE_EDIT_TEXT
  case TYPE_BUTTON
  case TYPE_CHECKBOX
  case TYPE_RADIO
  case TYPE_SELECT
  case TYPE_PROGRESS_BAR
  case TYPE_TOGGLE
  case TYPE_BAR_BUTTON_ITEM
  case TYPE_DEFAULT
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RRViewType : Swift.String, Swift.Decodable, Swift.Encodable {
  case TYPE_FLOATING
  case TYPE_EMBED
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RaccoonLogEvent : Swift.String, Swift.Decodable, Swift.Encodable {
  case RACCOON_INITIALIZED
  case CHAT_VIEW_OPEN
  case MESSAGE_SENT
  case NON_ACTION_RESPONSE
  case ACTION_RESPONSE
  case TASK_SUCCESS
  case TASK_FAILURE
  case ACTION_RESPONSE_TIMEOUT
  case CHAT_FLOATER_DISMISSED
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct RaccoonSnapshot : Swift.Decodable, Swift.Encodable, Swift.Equatable {
  public let viewName: Swift.String
  public let viewHeight: Swift.Int
  public let viewWidth: Swift.Int
  public let viewOrientation: Swift.String
  public let elements: [RaccconElement]
  public var inputs: [RaccconElement]
  public let actionElement: RaccconElement
  public let scrollDetails: [Swift.String : RaccoonScrollView]
  public let viewDescription: Swift.String
  public let screenshotKey: Swift.String
  public let index: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension RaccconElement : Swift.Equatable {
  public static func == (lhs: RaccconElement, rhs: RaccconElement) -> Swift.Bool
}
extension RaccoonScrollView {
  public static func == (lhs: RaccoonScrollView, rhs: RaccoonScrollView) -> Swift.Bool
}
extension RaccoonSnapshot {
  public static func == (lhs: RaccoonSnapshot, rhs: RaccoonSnapshot) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class RaccoonTrackingTask {
  public static var taskFlow: [RaccoonSnapshot]
  public static func showTrackingControlView(view: UIKit.UIView)
  @objc deinit
}
public struct RRLayout : Swift.Decodable, Swift.Encodable {
  public var viewType: RRViewType
  public var margin: [Swift.Int]
  public var size: Swift.Int
  public var image: Swift.String
  public var imageSize: Swift.Int
  public var closeButton: Swift.String
  public var styles: RRStyles
  public var isFixed: Swift.Bool
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RRScrollActionDetails : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct RRScrollOffset : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct RRTaskResult {
}
extension RaccoonType : Swift.Equatable {}
extension RaccoonType : Swift.Hashable {}
extension RaccoonType : Swift.RawRepresentable {}
extension RaccoonInputType : Swift.Equatable {}
extension RaccoonInputType : Swift.Hashable {}
extension RaccoonInputType : Swift.RawRepresentable {}
extension RRViewType : Swift.Equatable {}
extension RRViewType : Swift.Hashable {}
extension RRViewType : Swift.RawRepresentable {}
extension RaccoonLogEvent : Swift.Equatable {}
extension RaccoonLogEvent : Swift.Hashable {}
extension RaccoonLogEvent : Swift.RawRepresentable {}
